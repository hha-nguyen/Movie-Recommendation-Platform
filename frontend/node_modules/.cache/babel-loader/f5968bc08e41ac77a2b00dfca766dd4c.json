{"ast":null,"code":"import Axios from \"axios\";\nconst API_URL = \"http://localhost:7777/api/v1/auth\"; // Spring Boot backend URL\n\nclass UserApiService {\n  joinUser(user) {\n    return Axios.post(API_URL + \"/register\", user);\n  }\n\n  loginOk(user) {\n    return Axios.post(API_URL + \"/login\", user).then(response => {\n      // Assuming your JWT token is returned in the response\n      const token = response.accessToken; // Save the token in local storage\n\n      localStorage.setItem(\"jwtToken\", token);\n      return response;\n    });\n  }\n\n  logoutOK() {\n    // Clear the JWT token from local storage upon logout\n    localStorage.removeItem(\"jwtToken\");\n    return Axios.post(API_URL + \"/logout\");\n  }\n\n}\n\nexport default new UserApiService();","map":{"version":3,"sources":["/home/mesto/Projects/clonenetflix/react-frontend/src/apis/UserApiService.js"],"names":["Axios","API_URL","UserApiService","joinUser","user","post","loginOk","then","response","token","accessToken","localStorage","setItem","logoutOK","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,mCAAhB,C,CAAqD;;AAErD,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACb,WAAOJ,KAAK,CAACK,IAAN,CAAWJ,OAAO,GAAG,WAArB,EAAkCG,IAAlC,CAAP;AACD;;AAEDE,EAAAA,OAAO,CAACF,IAAD,EAAO;AACZ,WAAOJ,KAAK,CAACK,IAAN,CAAWJ,OAAO,GAAG,QAArB,EAA+BG,IAA/B,EACJG,IADI,CACCC,QAAQ,IAAI;AAChB;AACA,YAAMC,KAAK,GAAGD,QAAQ,CAACE,WAAvB,CAFgB,CAGhB;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACA,aAAOD,QAAP;AACD,KAPI,CAAP;AAQD;;AAEDK,EAAAA,QAAQ,GAAG;AACT;AACAF,IAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACA,WAAOd,KAAK,CAACK,IAAN,CAAWJ,OAAO,GAAG,SAArB,CAAP;AACD;;AApBkB;;AAuBrB,eAAe,IAAIC,cAAJ,EAAf","sourcesContent":["import Axios from \"axios\";\n\nconst API_URL = \"http://localhost:7777/api/v1/auth\"; // Spring Boot backend URL\n\nclass UserApiService {\n  joinUser(user) {\n    return Axios.post(API_URL + \"/register\", user);\n  }\n\n  loginOk(user) {\n    return Axios.post(API_URL + \"/login\", user)\n      .then(response => {\n        // Assuming your JWT token is returned in the response\n        const token = response.accessToken;\n        // Save the token in local storage\n        localStorage.setItem(\"jwtToken\", token);\n        return response;\n      });\n  }\n\n  logoutOK() {\n    // Clear the JWT token from local storage upon logout\n    localStorage.removeItem(\"jwtToken\");\n    return Axios.post(API_URL + \"/logout\");\n  }\n}\n\nexport default new UserApiService();\n"]},"metadata":{},"sourceType":"module"}